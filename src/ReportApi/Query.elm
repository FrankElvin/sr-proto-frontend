-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ReportApi.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import ReportApi.InputObject
import ReportApi.Interface
import ReportApi.Object
import ReportApi.Scalar
import ReportApi.ScalarCodecs
import ReportApi.Union


{-| Fetch all reports
-}
getAllReports :
    SelectionSet decodesTo ReportApi.Object.CompanyReport
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
getAllReports object____ =
    Object.selectionForCompositeField "getAllReports" [] object____ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ReportRequiredArguments =
    { reportId : ReportApi.ScalarCodecs.Id }


{-| Fetch one report

  - reportId -

-}
report :
    ReportRequiredArguments
    -> SelectionSet decodesTo ReportApi.Object.CompanyReport
    -> SelectionSet (Maybe decodesTo) RootQuery
report requiredArgs____ object____ =
    Object.selectionForCompositeField "report" [ Argument.required "reportId" requiredArgs____.reportId (ReportApi.ScalarCodecs.codecs |> ReportApi.Scalar.unwrapEncoder .codecId) ] object____ (identity >> Decode.nullable)
